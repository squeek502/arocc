const TargetSet = Properties.TargetSet;

# TODO this file is generated from LLVM sources and
# needs cleanup to be considered source.

pub const max_param_count = 12;

__builtin_add_overflow
    .param_str = "b."
    .attributes = .{ .custom_typecheck = true, .const_evaluable = true }

__builtin_complex
    .param_str = "v."
    .attributes = .{ .@"const" = true, .custom_typecheck = true, .const_evaluable = true }

__builtin_inf
    .param_str = "d"
    .attributes = .{ .@"const" = true, .const_evaluable = true }

__builtin_inff
    .param_str = "f"
    .attributes = .{ .@"const" = true, .const_evaluable = true }

__builtin_infl
    .param_str = "Ld"
    .attributes = .{ .@"const" = true, .const_evaluable = true }

__builtin_isinf
    .param_str = "i."
    .attributes = .{ .@"const" = true, .custom_typecheck = true, .lib_function_with_builtin_prefix = true, .const_evaluable = true }

__builtin_isinf_sign
    .param_str = "i."
    .attributes = .{ .@"const" = true, .custom_typecheck = true, .lib_function_with_builtin_prefix = true, .const_evaluable = true }

__builtin_isnan
    .param_str = "i."
    .attributes = .{ .@"const" = true, .custom_typecheck = true, .lib_function_with_builtin_prefix = true, .const_evaluable = true }

__builtin_mul_overflow
    .param_str = "b."
    .attributes = .{ .custom_typecheck = true, .const_evaluable = true }

__builtin_nan
    .param_str = "dcC*"
    .attributes = .{ .pure = true, .lib_function_with_builtin_prefix = true, .const_evaluable = true }

__builtin_sub_overflow
    .param_str = "b."
    .attributes = .{ .custom_typecheck = true, .const_evaluable = true }

__builtin_va_copy
    .param_str = "vAA"

__builtin_va_end
    .param_str = "vA"

__builtin_va_start
    .param_str = "vA."
    .attributes = .{ .custom_typecheck = true }

__va_start
    .param_str = "vc**."
    .language = .all_ms_languages
    .attributes = .{ .custom_typecheck = true }

va_copy
    .param_str = "vAA"
    .header = .stdarg
    .attributes = .{ .lib_function_without_prefix = true }

va_end
    .param_str = "vA"
    .header = .stdarg
    .attributes = .{ .lib_function_without_prefix = true }

va_start
    .param_str = "vA."
    .header = .stdarg
    .attributes = .{ .lib_function_without_prefix = true }
